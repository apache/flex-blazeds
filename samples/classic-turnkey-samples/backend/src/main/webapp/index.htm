<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>BlazeDS Samples</title>
<link href="main.css" rel="stylesheet" type="text/css" />
</head>
<body>

<h1>BlazeDS Classic Turnkey Samples </h1>
<div class="highlight">
<h3>Starting the Samples Database </h3>
<p>You have to <strong>start the sample database</strong> before you can run the BlazeDS samples. The samples use an HSQLDB database that located in the [installdir]/samples/classic-turnkey-samples/sampledb directory.</p>
<p>To start the sample database:</p>
<ol>
  <li>Open a command prompt and go to the [installdir]/samples/classic-turnkey-samples/sampledb</li>
  <li>Run startdb.bat (Windows) or startdb.sh (Unix-based systems)</li>
</ol>
</div>
<h2>Source Code</h2>
<p>The source code for all the sample Royale applications is available in [installdir]/samples/classic-turnkey-samples/frontend.</p>

<h2>30 Minute Test Drive</h2>
<p>The objective of this test drive is to give you, in a very short amount of time, an understanding of how the BlazeDS data services work and what they can do. 
This test drive consists of a series of eight samples kept as concise as possible (typically between 10 and 50 lines of code) to clearly expose features of interest. </p>

<p><a href="testdrive.htm">Take the test drive</a></p>

<h2>Other Samples</h2>
<ul>
<li><a href="#inventory">Inventory Management</a></li>
<li><a href="#traderdesktop">Trader Desktop</a></li>
<li><a href="#dashboard">Collaboration Dashboard</a></li>
<li><a href="#runtimeconfig">Runtime Configuration</a></li>
</ul>

<div class="item">
<a name="inventory"></a>
<h3>Inventory Management</h3>
<p><strong>Warning:</strong> This sample has not yet been ported to Apache Royale. It is currently unavailable.</p>
<s>
<p>This application demonstrates how to use the RemoteObject to build a simple CRUD (Create/Update/Delete) application.</p>
<p>Click <a href="inventory/index.html">here</a> to start the Inventory Management application</p>
</s>
</div>

<div class="item">
<a name="traderdesktop"></a>
<h3>Trader Desktop </h3>
<p><strong>Warning:</strong> This sample has not yet been ported to Apache Royale. It is currently unavailable.</p>
<s>
<p>This example demonstrates how to use the message service to push data from the server to the client. At the server side, a Java component publishes simulated market data to a BlazeDS messaging destination. The Trader Desktop application subscribes to real time updates for the stocks specified in a configurable watch list. This application  lets you experiment with different types of channels (streaming, polling) supported by BlazeDS as well as a channel that uses adaptive polling. Using adaptive polling (using a per client outbound message queue processor), you have full control over  how messages are handled by queue processors  and delivered to individual clients. For example you can specify per-client delays for message delivery, and provide custom logic defining how messages are merged between deliveries.</p>
<ol>
  <li>Click <a href="traderdesktop/startfeed.jsp">here</a> to start the feed</li>
  <li>Click <a href="traderdesktop/index.html">here</a> to start the Trader Desktop application</li>
  <li>Click <a href="traderdesktop/stopfeed.jsp">here</a> to stop the feed</li>
</ol>  
</s>
</div>


<div class="item">
<a name="dashboard"></a>
<h3>Collaboration Dashboard</h3>
<p><strong>Warning:</strong> This sample has not yet been ported to Apache Royale. It is currently unavailable.</p>
<s>
<p>The Collaboration Dashboard show how you can use the Message Service  to build collaborative applications. To try this sample, open the application in two different browser windows 
and notice how selections made in one window are reflected in the other window. For example, the chart on the left shows total revenue across all regions on a monthly basis. 
When you select a month in this chart, the pie chart in the upper right panel is updated to display a regional breakdown for the selected month. 
If you select a region in the pie chart, the chart in the lower-right panel is updated to display the selected region's results compared to the average for the given time period.</p>
<p><a href="dashboard/index.html">Run the sample </a></p>
</s>
</div>

<div class="item">
<a name="runtimeconfig"></a>
<h3>Runtime Configuration </h3>
<p>Runtime configuration provides an alternative approach to defining destinations and adapters. In addition to statically defining destinations and adapters in the XML configuration files (remoting-config.xml and messaging-config.xml), you can  create destinations and adapters programmatically at runtime. Your runtime destinations and adapters can be injected at server startup, or created as needed during the life cycle of an application. The  remoting destination samples  provide examples of destinations injected at server startup. The messaging sample  provides an example of a destination created as needed. </p>
<h4>Remoting destination </h4>
<p><a href="runtimeconfig-remoting/index.html">Run the sample</a> </p>
<p>See flex.samples.runtimeconfig.EmployeeRuntimeRemotingDestination.java to see how the &quot;runtime-employee-ro&quot; destination is created programmatically.</p>
<h4>Messaging destination </h4>
<p><a href="runtimeconfig-messaging/index.html">Run the sample</a> </p>
<p>See flex.samples.runtimeconfig.ChatRoomService.java to see how the chat room destinations are created programmatically.</p>
</div>

</body>
</html>